// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  pending
  access
  canceled
}

model User {
  id Int @id @default(autoincrement())
  email String
  nickname String 
  password String
  role Role @default(USER)
  createdAt DateTime @default(now())
  cart Cart? @relation
  rating Rating[] @relation
  refreshToken RefreshToken[] @relation
  order Order[] @relation

  @@unique([email], map: "unique_email")
}

model Cart {
  id Int @id @default(autoincrement())
  user_id Int @unique
  isLocked Boolean @default(false)
  user User @relation(fields: [user_id], references: [id])
  cartProduct CartProduct[] @relation
  order Order[] @relation
}

model Order {
  id Int @id @default(autoincrement())
  user_id Int
  cart_id Int
  createdAt DateTime @default(now())
  total_price Float
  status OrderStatus @default(pending)
  user User @relation(fields: [user_id], references: [id])
  cart Cart @relation(fields: [cart_id], references: [id])

  orderProduct OrderProduct[] @relation
}

model OrderProduct {
  id Int @id @default(autoincrement())
  order_id Int
  product_id Int
  qty Int
  order Order @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@unique([order_id, product_id], name: "order_id_product_id")
}

model Product {
  id Int @id @default(autoincrement())
  name String @unique
  type_id Int
  brand_id Int
  rating Float
  price Float @default(10)
  stock Int @default(5)
  productType ProductType @relation(fields: [type_id], references: [id])
  brand Brand @relation(fields: [brand_id], references: [id])
  
  cartProduct CartProduct[] @relation
  ratings Rating[] @relation
  orderProduct OrderProduct[] @relation
}

model CartProduct {
  id Int @id @default(autoincrement())
  cart_id Int
  product_id Int
  qty Int 
  cart Cart @relation(fields: [cart_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@unique([cart_id, product_id], name: "cart_id_product_id")
}

model ProductType {
  id Int @id @default(autoincrement())
  type_name String @unique
  product Product[] @relation
  typeBrand TypeBrand[] @relation
}

model Brand {
  id Int @id @default(autoincrement())
  brand_name String @unique
  product Product[] @relation
  typeBrand TypeBrand[] @relation
}

model TypeBrand {
  id Int @id @default(autoincrement())
  type_id Int
  brand_id Int
  productType ProductType @relation(fields: [type_id], references: [id])
  brand Brand @relation(fields: [brand_id], references: [id])
}

model Rating {
  id Int @id @default(autoincrement())
  user_id Int
  product_id Int
  rating_value Int
  user User @relation(fields: [user_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
}

model RefreshToken {
  id Int @id @default(autoincrement())
  user_id Int
  token String
  expires_at Int
  revoked_at Boolean 
  user User @relation(fields: [user_id], references: [id])

  @@unique([user_id, token], name: "user_id_token")
}
